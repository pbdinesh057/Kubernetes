# what are configmaps and secrets?
# ConfigMaps and Secrets are Kubernetes resources that allow you to decouple configuration artifacts from image content to keep containerized applications portable. ConfigMaps allow you to store non-sensitive data in key-value pairs, while Secrets allow you to store sensitive data such as passwords, OAuth tokens, and SSH keys.

# we want our applications to be as portable as possible. A good way to achieve this is to decouple the application from its configuration. Back in the old days, configuration and application were the same thing; since the application code was designed to work only on one environment, configuration values were often bundled within the application code itself, so the configuration and application code were tightly coupled.

# Having both application code and configuration values treated as the same thing reduces the portability of an application. Now, things have changed a lot, and we must be able to update the application configuration because we want to make our application as portable as possible, enabling us to deploy applications in multiple environments flawlessly.

# Let’s look at some typical examples of the types of configuration values you should decouple from an app:

# API keys to access an Amazon S3 bucket
# The password of the MySQL server used by your application
# The endpoint of a Redis cluster used by your application
# Pre-computed values such as JWT token private keys

# 1. Create a ConfigMap or a Secret with the configuration values.
# 2. Create a Pod referencing the ConfigMap or Secret.

# kubectl create configmap my-first-configmap

# ~/my-second-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-second-configmap

  
Creating a ConfigMap from literal values:
# $ kubectl create configmap my-first-configmap --from-literal=KEY1=VALUE1 --from-literal=KEY2=VALUE2
# $ kubectl create cm my-third-configmap --from-literal=color=blue --from-literal=size=large
# $ kubectl create cm my-fourth-configmap --from-literal=color=blue --from-literal=version=1 --from-literal=environment=prod



Storing entire configuration files in a ConfigMap:

# $ kubectl create configmap my-first-configmap --from-file=config-file-1.txt

#  echo "I'm just a dummy config file" >> $HOME/configfile.txt
#  kubectl create cm my-sixth-configmap --from-literal=color=yellow --from-file=$HOME/configfile.txt

# ~/my-seventh-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-seventh-configmap
data:
  color: "green"
  configfile.txt: |
    I'm another configuration file.


Creating a ConfigMap from an env file:

# An env file is a key=value format file where each key is separated by a line break. This is a configuration format that’s used by some applications, so Kubernetes introduced a way to generate a ConfigMap from an existing env file. This is especially useful if you have an already existing application that you want to migrate into Kubernetes.

# # ~/my-env-file.env
# hello=world
# color=blue
# release=1.0
# production=true

# kubectl create cm my-eight-configmap --from-env-file my-env-file.env


Reading values inside a ConfigMap:

# kubectl describe cm my-fourth-configmap
# kubectl get cm my-fourth-configmap -o yaml



Linking ConfigMaps as environment variables:

# bring our ConfigMaps to life by linking them to Pods. First, we will focus on injecting ConfigMaps as environment variables. Here, we want the environment variables of a container within a Pod to come from the values of a ConfigMap. This is a common use case, as many applications read their configuration from environment variables.





# we created a ConfigMap called my-third-configmap that contains a parameter called color, with a value of blue. In this example, we will create a Pod with the quay.io/iamgini/my-flask-app:1.0 image, and we will link my-third-configmap to the Pod so that the flask application container is created with an environment variable called COLOR, with a value set to blue, according to what we have in the ConfigMap. Here is the YAML manifest to achieve that. Pay attention to the env: key in the container spec:


# flask-pod-with-configmap.yaml
apiVersion: v1
kind: Pod
metadata:
  name: flask-pod-with-configmap
  labels:
    app: my-flask-app
spec:
  containers:
    - name: flask-with-configmap
      image: quay.io/iamgini/my-flask-app:1.0
      env:
        - name: COLOR # Any other name works here.
          valueFrom:
            configMapKeyRef:
              name: my-third-configmap
              key: color


# creating pod using configmap values as reference

apiVersion: v1
kind: Pod
metadata:
  name: my-pod-with-configmap
  labels:
    app: my-cm-pod
spec:
  containers:
    - name: my-container
      image: nginx:latest
      env:
        - name: COLOR
          valueFrom:
            configMapKeyRef:
              name: my-third-configmap
              key: color
        - name: SIZE
          valueFrom:
            configMapKeyRef:
              name: my-third-configmap
              key: size
        - name: VERSION
          valueFrom:
            configMapKeyRef:
              name: my-third-configmap
              key: version
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: my-third-configmap
              key: environment
  restartPolicy: Never


# we don’t want to retrieve a single value in this ConfigMap but all the values inside of it instead. Here is the updated YAML Pod manifest. This time, we don’t use individual env keys but an envFrom key in our container spec instead:

# flask-pod-with-configmap-all.yaml
apiVersion: v1
kind: Pod
metadata:
  name: flask-pod-with-configmap-all
spec:
  containers:
    - name: flask-with-configmap
      image: quay.io/iamgini/my-flask-app:1.0
      envFrom:
        - configMapRef:
            name: my-fourth-configmap


Mounting a ConfigMap as a volume mount:

# Earlier in this chapter, we created two ConfigMaps that store dummy configuration files. kubectl allows you to mount a ConfigMap inside a Pod as a volume. This is especially useful when the ConfigMap contains the content of a file that you want to inject into a container’s filesystem.

# Just like when we inject environment variables, we need to do this imperatively using a YAML manifest file. Here, we are going to mount a ConfigMap called my-sixth-configmap as a volume mount to a new Pod, flask-pod-with-configmap-volume, as follows:

# flask-pod-with-configmap-volume.yaml
apiVersion: v1
kind: Pod
metadata:
  name: flask-pod-with-configmap-volume
spec:
  volumes:
    - name: configuration-volume
      configMap:
        name: my-sixth-configmap # Configmap name goes here
  containers:
    - name: flask-with-configmap-volume
      image: quay.io/iamgini/my-flask-app:1.0
      volumeMounts:
        - name: configuration-volume # match the volume name
          mountPath: /etc/conf


# kubectl exec pods/flask-pod-with-configmap-volume -c flask-with-configmap-volume -- ls -lrth /etc/conf
# total 0
# lrwxrwxrwx 1 root root 21 Feb 23 19:56 configfile.txt -> ..data/configfile.txt
# lrwxrwxrwx 1 root root 12 Feb 23 19:56 color -> ..data/color

#   kubectl exec pods/flask-pod-with-configmap-volume -c flask-with-configmap-volume -- cat /etc/
# conf/color
# yellow
#   kubectl exec pods/flask-pod-with-configmap-volume -c flask-with-configmap-volume -- cat /etc/conf/configfile.txt
# I'm just a dummy config file



Updating a ConfigMap:

# There are two primary methods to update a ConfigMap in Kubernetes. The first involves using the kubectl apply command with a modified ConfigMap definition file. This approach is ideal for version control and collaborative environments. Simply make the necessary changes to your ConfigMap YAML file and apply the updates using kubectl apply.

# Alternatively, you can directly edit an existing ConfigMap using the kubectl edit command. This provides an interactive way to modify the ConfigMap’s contents. However, be cautious when using this method, as it doesn’t involve version control.


Immutable ConfigMaps:

# By default, ConfigMaps are mutable, meaning you can update their values at any time. However, you can make a ConfigMap immutable by setting the immutable field to true in the ConfigMap’s metadata. This prevents any further updates to the ConfigMap, ensuring that its values remain unchanged.

# immutable-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: immutable-configmap
data:
  color: "blue"
  version: "1.0"
  environment: "prod"
immutable: true



mounting cm as volume in a pod:



# nginx-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-hello
  labels:
    app: test
immutable: false
data:
  hello1.html: |
    <html>
      hello world 1
    </html>
  hello2.html: |
    <html>
      hello world 2
    </html>



# nginx-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-hello
  labels:
    app: test
spec:
  containers:
    - name: nginx
      image: nginx:1.14.2
      ports:
        - containerPort: 80
      volumeMounts:
        - name: nginx-hello
          mountPath: "/usr/share/nginx/html/hello"
  volumes:
    - name: nginx-hello
      configMap:
        name: nginx-hello


################################SECRETS######################################

Managing sensitive configuration with the Secret object:

# Secrets are similar to ConfigMaps, but they are designed to store sensitive information such as passwords, OAuth tokens, and SSH keys. Secrets are base64-encoded by default, but you can also use encryption to secure sensitive data. Like ConfigMaps, Secrets can be mounted as volumes or injected as environment variables into Pods.

# kubectl create secret generic my-first-secret --from-literal='db_password=my-db-password'

#encoding the secret

apiVersion: v1
kind: Secret
metadata:
  name: my-second-secret
type: Opaque
data:
    db_password: bXktZGItcGFzc3dvcmQ= #base64 encoded value of my-db-password


# ~/secret-from-file-stringData.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-secret-stringdata
type: Opaque
stringData:
  db_password: my-db-password # This is not base64-encoded


Creating a Secret with content from a file:

# echo -n 'mypassword' > ./password.txt





Consuming a Secret as an environment variable:


# flask-pod-with-secret.yaml
apiVersion: v1
kind: Pod
metadata:
  name: flask-pod-with-secret
  labels:
    app: flask-with-secret
spec:
  containers:
    - name: flask-with-secret
      image: quay.io/iamgini/my-flask-app:1.0
      env:
        - name: PASSWORD_ENV_VAR # Name of env variable
          valueFrom:
            secretKeyRef:
              name: my-first-secret # Name of secret object
              key: db_password # Name of key in secret object


Create a Secret first by using the following YAML with the envFrom sample:

# secret-from-file-database.yaml
apiVersion: v1
kind: Secret
metadata:
  name: appdb-secret
type: Opaque
stringData:
  db_user: appadmin
  db_password: appdbpassword

# read the secret values
apiVersion: v1
kind: Pod
metadata:
  name: flask-pod-with-secret-all
  labels:
    app: flask-with-secret
spec:
  containers:
    - name: flask-with-secret
      image: quay.io/iamgini/my-flask-app:1.0
      envFrom:
        - secretRef:
            name: appdb-secret # Name of the secret object



Consuming a Secret as a volume mount:

apiVersion: v1
kind: Pod
metadata:
  name: flask-pod-with-secret-volume
  labels:
    app: flask-with-secret-volume
spec:
  containers:
    - name: flask-with-secret
      image: quay.io/iamgini/my-flask-app:1.0
      volumeMounts:
        - name: mysecret-volume
          mountPath: '/etc/password-mounted-path'
          readOnly: true  # Setting readOnly to true to prevent writes to the secret
  volumes:
    - name: mysecret-volume
      secret:
        secretName: my-second-secret # Secret name goes here